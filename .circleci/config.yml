version: 2.1
orbs: 
  slack: circleci/slack@4.10.1



  
commands:

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              python3 -m pip install --user ansible
  
  install_nodejs:
    description: Install nodejs 13
    steps:
        - run:
            name: Install nodejs on docker image
            command: |
                # Install Node.js LTS version as our base Node.js version
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt-get install -y nodejs
                # Use n version manager to use Node.js v13.8.0
                sudo npm install -g n
                sudo n 13.8.0    



  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}  --recursive
            aws cloudformation delete-stack --stack-name back-end-stack-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name front-end-stack-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
              
        
        
        
            
jobs:
  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          
          channel: Hussein Badran
          
          event: always
          template: basic_fail_1
          

  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-build]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm i
            npm run test
     
      # Your job code here
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end Test
          command: |
            cd backend
            npm install
            npm run test
                     
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-build]

      - run:
          name: Scan and analyse Front end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
    

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Scan and analyse back end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            yum install gzip tar -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name back-end-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  
          
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name front-end-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
           
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text >> ~/project/.circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure      
      - run:
          name: fetch instance ID for quick deletion 
          command: |
                  aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag:project,Values=udapeople-backend" >  ~/project/.circleci/files/instanceid.txt 
                  cat ~/project/.circleci/files/instanceid.txt 
               
      - persist_to_workspace:
          root: ~/
          paths:
                - project/.circleci/files/instanceid.txt   

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["dd:f6:9d:23:7a:5e:ac:25:58:31:a5:17:e0:0c:ef:4f"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_awscli
        
             
      - run:
          name: Run Ansible Playbook 
          command: |
             cd .circleci/ansible
             cat inventory.txt
             ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install amazon/aws-cli and python
          command: | 
             sudo apt-get update -y
             sudo apt upgrade -y
             sudo apt install python python3-pip -y
             pip3 --no-cache-dir install --upgrade awscli  
       

      
                
                            
      - run:
          name: Run migrations
          command: |
            cd backend
            ##npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
        

      - run:
          name: Send migration status to kvdb.io 
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                 
                  curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi      
     # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations   
  
  
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
       - image: cimg/python:3.10
    steps:
      
      - checkout
      - attach_workspace:
         at: ~/
      # Checkout code from git
      - install_awscli
      - install_ansible
      
      - run: 
          name: "Install Node.js 13"
          command: |
                # Install Node.js LTS version as our base Node.js version
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt-get install -y nodejs
                # Use n version manager to use Node.js v13.8.0
                sudo npm install -g n
                sudo n 13.8.0

      

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment   
      - revert-migrations  


  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10

    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["dd:f6:9d:23:7a:5e:ac:25:58:31:a5:17:e0:0c:ef:4f"]
      - attach_workspace:
          at: ~/   
      - install_awscli
      - install_ansible

      - run: 
          name: "Install Node.js 13"
          command: |
                # Install Node.js LTS version as our base Node.js version
                curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
                sudo apt-get install -y nodejs
                # Use n version manager to use Node.js v13.8.0
                sudo npm install -g n
                sudo n 13.8.0    


      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations 


  smoke-test:
    docker:
       - image: cimg/python:3.10

    steps:
        - checkout  
        - install_awscli
        - install_nodejs

        - attach_workspace:
            at: ~/



        - run:
            name: Backend smoke test.
            command: |
                # Fetch and prepare the BACKEND_IP env var
                      instanceId=`cat ~/project/.circleci/files/instanceid.txt`
                      export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" instance-id=$instanceId)
                      export API_URL="http://${BACKEND_IP}:3030"
                      echo "API_URL = ${API_URL}"
                      if curl "${API_URL}/api/status" | grep "ok"
                      then
                          return 0
                      else
                          return 1
                           fi
                   
        - run:
            name: Frontend smoke test.
            command: |
              # your code here
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure  
        - destroy-environment
        - revert-migrations 



#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - install_awscli
#       - run:
#           name: Update cloudfront distribution
#           command: |
                  #   aws cloudformation deploy \
                  # --template-file .circleci/files/cloudfront.yml \
                  # --stack-name InitialStack \
                  # --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
                  # --tags project=udapeople
#             # your code here
#       # Here's where you will add some code to rollback on failure  
      # - destroy-environment
      # - revert-migrations 
# cleanup:
#     docker:
#       # Docker image here
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
               # Fetch the Old workflow ID
#                 export OldWorkflowID=$(aws cloudformation \
#                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                 --no-paginate --output text)
#                 echo OldWorkflowID: "${OldWorkflowID}"
#                 echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
#                 # Fetch the stack names          
#                 export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#                 echo Stack names: "${STACKS[@]}
# #             # your code here

#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      - notify:
            context: slack